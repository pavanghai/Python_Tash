# -*- coding: utf-8 -*-
"""task_03WA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uLT_qk3YH344VxAPbWaOrr20IVbO_yeE
"""

# 1.Create a list of the 10 elements of four different types of Data Types like int, string, complex, and float.
t_wa01_list = [2, 'numbers',10j, 5.5, 'from', 10 , 20, 30.5, 20.5, 50j]
print (t_wa01_list)
for i in t_wa01_list: print (type(i),end = " is type & its Value is ") ; print (i)

# 2. Create a list of size 5 and execute the slicing structure
t_wa02_list = range(10,51,10) # this will not store the value of range, but just the command
print (t_wa02_list)
t_wa02_list = list(t_wa02_list)

print (t_wa02_list, ": full list without indexing")
print (t_wa02_list[:], ": full list using blank index")
print (t_wa02_list[1:3], ": list using start and end index")
print (t_wa02_list[::2], ": full list using blank index, skiping 1 value")

# 3. Create a list of given structure and 
# run x=[100,200,300,400,500,[1,2,3,4,5,[10,20,30,40,50],6,7,8,9],600,700,800] 
# Access list [1, 2, 3, 4] Access list [600, 700] Access list [100, 300, 500, 600, 800] 
# Access list [[800, 700, 600, [1, 2, 3, 4, 5, [10, 20, 30, 40, 50], 6, 7, 8, 9], 500, 400, 300, 200, 100]] 
# Access list [10] Access list [ ]
t_wa03_list = [100,200,300,400,500,[1,2,3,4,5,[10,20,30,40,50],6,7,8,9],600,700,800]
print (t_wa03_list[5][:4])
print (t_wa03_list[6:8])
print (t_wa03_list[::2])
print (t_wa03_list[::-1])
print (t_wa03_list[5][5][0])
print (t_wa03_list)

# 4.Create a list of thousand numbers using range and xrange and see the difference between each other.
t_wa04_msg = ''' python 3 Range is same as xrange in python 2.7 and below
'''
print (t_wa04_msg)
# Python does not unpack the result of the range() function.
# We can use argument-unpacking operator i.e. *.
t_wa04_listRang = [*range(1,1001)] # the argument-unpacking operator has unpacked, range function.
print (len(t_wa04_listRang), "\nDont want to use 1000 numbers so using len function")

# 5. How Tuple is beneficial as compared to the list?
t_wa05_msg = ''' Since tuples are immutable Its faster to performe and lists are mutable '''
print (t_wa05_msg)

# 6. Write a program in Python to iterate through the list of numbers in the 
# range of 1,100 and print the number which is divisible by 3 and a multiple of 2.
t_wa06_list = [*range(1,101)] ; t_wa06_sollist = []
for i in t_wa06_list:
    if i%3 ==0 and i%2 == 0:
        # print (i, "Is divisible by 3 and a multiple of 2")
        t_wa06_sollist.append(i)

print (t_wa06_sollist, "\nIs the list of numbers that is divisible by 3 and a multiple of 2 \n")

# 7. Write a program in Python to reverse a string and print only the vowel 
# alphabet if it exists in the string with their index.

t_wa07_inputString = "This is the string entered by the user" # Hard Code to avoide
# t_wa07_inputString = input("Enter a String :")
print ("String: ", t_wa07_inputString)
print ("Reversed String: ", t_wa07_inputString[::-1])
# print (t_wa07_inputString [::-1])

t_wa07_vowal = 'aeiouAEIOU' ; t_wa07_num=0
for i in t_wa07_inputString : # and i in t_wa07_vowal:
    # print (t_wa07_num)
    if i in t_wa07_vowal:
        print (i,"is at index value : ",t_wa07_num,end="\n")
    t_wa07_num +=1

# 8. Write a program in Python to iterate through the 
# string “hello my name is Abcde” and print the string which has even length of the word.

t_wa08_str = "hello my name is Abcde" ; t_wa08_newstr = ""
# print (len(t_wa08_str))
for i in range(len(t_wa08_str)):
    if i%2 == 0:
        # print (t_wa08_str[i], end="")
        t_wa08_newstr =  t_wa08_newstr+t_wa08_str[i]
print (t_wa08_newstr)

# 9. Write a program in python to print the pair of numbers whose sum is equal 
# to result number that is let's say 8. x=[1,2,3,4,5,6,7,8,9,-1]

t_wa09_x=[1,2,3,4,5,6,7,8,9,-1]
t_wa09_result_num = 8

for i in range(len(t_wa09_x)):
    # print ("i is ", i)
    for j in range(len(t_wa09_x)):
        # print ("j is ", j)
        if t_wa09_x[i] + t_wa09_x[j] == t_wa09_result_num and t_wa09_x[i] != t_wa09_x[j]:
            print (t_wa09_x[i],t_wa09_x[j])

'''
10. Write a program in Python to complete the following task: Create two different 
lists as in even_list and odd_list Ask the user to enter the number in the 
range of 1,50 and make sure if the entered number is even appended it to the 
even_list and if the entered number is odd append it to the odd list. Keep that 
in mind you can only add 5 items in each list Make sure once you entered the total 
5 elements calculate the sum of the list and return the maximum out of the list.
'''
t_wa_10_even_list = []
t_wa_10_odd_list = []
t_wa_10_InputList = []
t_wa_10_msg = ''' 
This program will take numbers as input, 
add to the odd and even list 
if any of the list gets 5 elements it wll stop the program '''
print (t_wa_10_msg)

while len(t_wa_10_odd_list) <5 and len(t_wa_10_even_list) <5 : 
  t_wa_10_InputNum = int(input("Enter a number: "))
  t_wa_10_InputList.append(t_wa_10_InputNum)

  if t_wa_10_InputNum % 2 ==0:
    t_wa_10_even_list.append(t_wa_10_InputNum)
  else:
    t_wa_10_odd_list.append(t_wa_10_InputNum)
print ("Game over! \nYou entered: ",t_wa_10_InputList)
print ("Even List: ",t_wa_10_even_list)
print ("Odd List: ",t_wa_10_odd_list)

'''
11. Write a program to find out the occurrence of a specific word from an 
alphanumeric statement. Example: 12abcbacbaba344ab

          Output: a=5 b=5 c=2 make sure you should avoid the numbers in you logic
'''
# Copied 
t_wa11_alphanumeric = "12abcbacbaba344ab" #travasing ? 
t_wa11_demo={}
for i in t_wa11_alphanumeric :
  if i in t_wa11_demo:
    t_wa11_demo[i]+=1
  else:
    t_wa11_demo[i]=1
print (t_wa11_demo)
# need output as a=5 b=5 c=2    HOW?
for i in t_wa11_demo:
  print (i, type(i))

# 12. Generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10).

t_wa12_givenTuple = (1,2,3,4,5,6,7,8,9,10)
t_wa12_evenList = []
for i in t_wa12_givenTuple:
  if i%2 == 0:
    t_wa12_evenList.append(i) # Adding to a list as tuples are immutable and dont how to add
t_wa12_evenTuple = tuple(t_wa12_evenList)
print(t_wa12_evenTuple)

#        OR
print("----- Only using Tuple ------")
t_wa12_givenTuple = (1,2,3,40,5,6,7,8,9,10)
t_wa12_evenTuple = ()
for i in t_wa12_givenTuple:
  if i%2 == 0:
    t_wa12_evenTuple = t_wa12_evenTuple + (i,)
print(t_wa12_evenTuple)