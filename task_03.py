# -*- coding: utf-8 -*-
"""Task_03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EX-IxJ58JV7XR4tc6IKVXt9DfQexQ34j

###TASK THREE: DATA STRUCTURES
"""

# 1. Create a list of the 10 elements of four different types of Data Types like int, string, complex, and float.
t0301_list = [2, 'numbers',10j, 5.5, 'from', 10 , 20, 30.5, 20.5, 50j]
# type(t0301_list[-1])
# len(t0301_list)

# 2. Create a list of size 5 and execute the slicing structure
t0302_list = range(10,51,10)
t0302_list = list(t0302_list)
print (t0302_list, ": full list without indexing")
print (t0302_list[:], ": full list using blank index")
print (t0302_list[1:3], ": list using start and end index")
print (t0302_list[::2], ": full list using blank index, skiping 1 value")

# 3. Write a program to get the sum and multiply of all the items in a given list.
t0303_list = [*range(1,11,1)] # use argument-unpacking operator i.e. *
t0303_add = 0 ; t0303_multiply = 1

for i in t0303_list:
  t0303_add +=i 
  t0303_multiply *=i

print ("Sum of all numbers in the list is ",t0303_add)
print ("Multiple of all numbers in the list is ",t0303_multiply)

# 4. Find the largest and smallest number from a given list.
t0304_minMax = [*range(3,27,3)]
t0304_min = min(t0304_minMax) ; t0304_max = max(t0304_minMax)
print ("Largest # is",t0304_max,"and Smallest # is",t0304_min ,"from the list")

# 5. Create a new list that contains the specified numbers after removing the even numbers from a predefined list.
t0305_list = [*range(1,21,1)]
t0305_nonEven = []
for i in t0305_list:
  if i%2 != 0:
    t0305_nonEven.append(i)
    # print (i,'is an odd number')
print ("Original list: ",t0305_list)
print ("After removing even numbers :",t0305_nonEven)

# 6. Create a list of first and last 5 elements where the values are square of numbers between 1 and 30 (both included).
t0306_list = [*range(1,31,1)] ; t0306_sqrVal = []
# by Cheating  NEED Better WAY
for i in range(1,8):
  t0306_sqrVal.append(i**2)
t0306_diff = list (set (t0306_list) & set(t0306_sqrVal))

print (t0306_list)
print (t0306_sqrVal)
print (t0306_diff)

# 7. Write a program to replace the last element in a list with another list. 
# Sample data: [[1,3,5,7,9,10],[2,4,6,8]] Expected output: [1,3,5,7,9,2,4,6,8]
t0307_list = [*range(1,15,2)] ; t0307_listNew = [*range(21,26)]
t0307_listOut =  t0307_list[:-1] + t0307_listNew
t0307_listOut

# 8. Create a new dictionary by concatenating the following two 
# dictionaries: a={1:10,2:20} b={3:30,4:40} Expected Result: {1:10,2:20,3:30,4:40}
t0308_dict_a = {1:10,2:20} ; t0308_dict_b={3:30,4:40}
t0308_dict_a.update(t0308_dict_b)
# print (t0308_dict_a, t0308_dict_b, t0308_dict_new)
t0308_dict_a

# 9. Create a dictionary that contains a number (between 1 and n) in the form(x,x*x). 
# Sample data (n=5) Expected Output: {1:1,2:4,3:9,4:16,5:25}
t0309_num = int(input("Enter a Number less then 10 :"))
# t0309_dict = {1:1}
for i in range (t0309_num):
  # if i == t0309_num-1:
  #   print ("Break", i)
  #   break
  # print (i+2)
  t0309_dict.update({i+1:(i+1)**2})
t0309_dict

# 10. Write a program which accepts a sequence of comma-separated numbers from the 
# console and generate a list and a tuple which contains every number. 
# Suppose the following input is supplied to the program: 34,67,55,33,12,98 
# The output should be: [‘34’,’67’,’55’,’33’,’12’,’98’] (‘34’,’67’,’55’,’33’,’12’,’98’)
t0310_inputNum = eval(input("Enter sequence of comma-separated numbers :"))
# print (type(t0310_inputNum),t0310_inputNum )
# print (len(t0310_inputNum))
t0310_tup = () ; t0310_list=[]
for i in range (len(t0310_inputNum)):
  # print (f"'{i}'")
  t0310_list.append(str(t0310_inputNum[i]))
  # t0310_tup.insert(str(t0310_inputNum[i]))

t0310_tup = tuple(t0310_list)
print (t0310_list)
print (t0310_tup)