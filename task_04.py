# -*- coding: utf-8 -*-
"""task_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1583AMujUkc4e4BityZri8MnK2J5modxp
"""

# 1. Write a program to reverse a string.
# Sample data: “1234abcd”
# Expected Output: “dcba4321”
t0401_string = "1234abcd"
def reverceString(t0401_string = "1234abcd"):
  t0401_string = t0401_string[::-1]
  # print (t0401_string)
  return t0401_string

reverceString("Hello world this is pavneet, I am chaecking 123456 reverse orders")
# print("x is :",x)

# 2. Write a function that accepts a string and calculate the number of uppercase
# letters and lowercase letters. Expected Output: No. of Upper case characters : 3
# No. of Lower case Characters : 12
# t0402_string = "This Program will Count Upper and low5eR CharaCterS in The SrTiNg"
def countUpperLower(t0402_string = "This Program will Count Upper and loweR CharaCterS in The SrTiNg"):
    upNum = loNum = 0 ; upCase = ""
    for i in range (26):
        upCase = upCase+chr(65+i)
    lowCase=upCase.lower()
    ucount = lcount = 0
    for i in t0402_string:
        if i in upCase:
            ucount +=1 
            # print ("I am in ", i)
        elif i in lowCase:
            lcount +=1

    print ("No. of Upper case characters : ",ucount)
    print ("No. of Lower case Characters : ",lcount)
    # return ucount, lcount

countUpperLower()
# len(t0402_string)

# or 

def countUpperLower(t0402_string = "This Program will Count Upper and loweR CharaCterS in The SrTiNg"):
    upNum = loNum = 0 ; uCase = upCase = ""
    upCase = [upCase+chr(65+i) for i in range(26)]
    
    upCase = "".join(upCase)
    lowCase=upCase.lower()
    
    for i in t0402_string:
        if i in upCase:
            upNum +=1 
        elif i in lowCase:
            loNum +=1

    print ("No. of Upper case characters : ",upNum)
    print ("No. of Lower case Characters : ",loNum)
        
countUpperLower()

# 3. Create a function that takes a list and returns a new list with unique elements of the first list.
t0403inputList = [20,20,'apple','apple', 'Orange', 56,87,56]
def uniqueElement(t0403inputList = [20,20,'apple','apple', 'Orange', 56,87,56]):

    # We can use set to get unique elements but the problem is, we will loose its sequence 
    '''
    uniqueList = list(set(t0403inputList))
    return uniqueList
    '''
    
    uniqueList = []
    '''
    # using loop 
    for i in t0403inputList:
        if i not in uniqueList:
            uniqueList.append(i)
    return uniqueList
    '''
    # using list comprehension 
    [uniqueList.append(i) for i in t0403inputList if i not in uniqueList]
    return uniqueList

uniqueElement()

# 4. Write a program that accepts a hyphen-separated sequence of words as input and
# prints the words in a hyphen-separated sequence after sorting them alphabetically.
# t0404inputString = "hello-this-is-Pavneet-I-am-Learning-Python"
def sortString(t0404inputString = "hello-this-is-Pavneet-I-am-Learning-Python"):
    sortstr = t0404inputString.split(sep='-') # spliting string to list 
    sortstr.sort() #sorted list
    sortstr = "-".join(sortstr) # converting list back to string
    return t0404inputString, sortstr

sortString()

# 5. Write a program that accepts a sequence of lines as input and prints the lines after
# making all characters in the sentence capitalized.
# eg input Hello world, practice makes perfect Output: HELLO WORLD, PRACTICE MAKES PERFECT 
def strCaps (t0405inputString = "Hello world, practice makes perfect"):
    return t0405inputString.upper()
strCaps()

# 6. Define a function that can receive two integral numbers in string form and
# compute their sum and print it in console.
def addNum(a = '5',b='6'):
    return int(a)+int(b)
addNum('9','6')

# 7. Define a function that can accept two strings as input and print the string with
# maximum length in console. If two strings have the same length, then the function
# should print all strings line by line.
def checkString(string1="This is String1",string2="This is String2"):
    if len(string1) == len(string2):
        print (string1)
        print (string2)
    elif len(string1) != len(string2):
        if len(string1) > len(string2):
            print (string1)
        else:
            print (string2)

checkString('This is String1', 'This is StringTwo')

# 8. Define a function which can generate and print a tuple where the value are square
# of numbers between 1 and 20.
def tupleSquare(num = 20):
    #This program will print Tuple of squared value from 1 to number
    tup = tuple([i**2 for i in range (1,int(num)+1)])
    return tup

print (tupleSquare(20))

# 9. Write a function called showNumbers that takes a parameter called limit. It should
# print all the numbers between 0 and limit with a label to identify the even and odd
# numbers.
# Example: If the limit is 3 , it should print:
# 0 EVEN
# 1 ODD
# 2 EVEN
# 3 ODD
def showNumbers (limit = 5):
    for i in range (limit+1):
        if i%2 == 0:
            print (i,"EVEN")
        else:
            print (i,"ODD")

showNumbers(9)

#10 Write a program which can filter() to make a list whose elements are even number
# between 1 and 20 ( both included)

# Most Important Note:
# when we use filter it takes Function and sequence as Argument 
#Syntex: filter (FUNCTION, SEQUENCE)

def listGen4m1(n=20):
    lis1 = [*range(1,int(n)+1)]
    return lis1

lis1 = listGen4m1(7)
print (lis1)

# Using pre defined Function
def evenNum(num):
    if(num % 2 == 0):
        return num

lis2 = list(filter(evenNum,lis1))
print (lis2)

# Using Lambda Function

lis3 = list(filter(lambda n : n%2 == 0, lis1))
print (lis3)

# 11. Write a program which can map() and filter() to make a list whose elements are
# square of even number in [1,2,3,4,5,6,7,8,9,10]

# Hints: Use map() to generate a list.
# Use filter() to filter elements of a list
# Use lambda to define anonymous functions

# step 1 make list from 1-10, Step2 make sq of even numbers only 
lis1 = [x for x in range(1,11)]

print ("lis1",lis1)

sqlis = [x**2 for x in range(1,11) if x%2 == 0]
print ("sqeven",sqlis)

# def sqNum(num):
#     # num=num**2
#     return num**2
# =list(map(sqNum,lis1))
# r
res = list(map(lambda x:x*x , lis1))
print ("res", res)

# res1 = list(filter(map(lambda x:x*x , lis1),lis1))
# print ("res1",res1)

# 12. Write a function to compute 5/0 and use try/except to catch the exceptions

try:
    def diverror():
        res = 5/0
        return res
    
    diverror()
except:
    print("Error")
# 5/0

# 13. Flatten the list [[1,2,3].,[4,5],[6,7,8]] into [1,2,3,4,5,6,7,8] using reduce
# Goal : Turn [1,2,3,4,5,6,7] to 1234567
def lisflat (lis = [[1,2,3],[4,5],[6,7,8]]):
    from functools import reduce
    result = (reduce((lambda x,y: x + y), lis))
    stringvalue=""
    for i in result:
        stringvalue = stringvalue+str(i)

    return stringvalue # result

lisflat()

# 14.(i) 
def foo():
    try:
        return 1
    finally:
        return 2

k = foo()
print(k) # Prints 2 from the final block try block is not working 

# (ii) 
def a():
    try:
        # f(x, 4) # this will give error as we have not defined f function
        pass # using pass to avoid error 
    finally:
        print('after f')
        print('after f?')
a()