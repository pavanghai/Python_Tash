# -*- coding: utf-8 -*-
"""Task_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PFyNTZxDBYj3SZq_NOU16_ug-ZaJ04Lm

### Task FIVE: HIGHER ORDER FUNCTIONS, GENERATORS, LIST COMPREHENSION AND DECORATOR
"""

# 1. Write a program to Python find the values which is not divisible 3 but is
# should be a multiple of 7. Make sure to use only higher order function.

def t0501fun(n=50): # First order function
    lis = list(map(int, range(1,n+1))) # creates a list of numbers using map and range
    filterlis = list(filter(lambda x: (x%7 == 0 and x%3 != 0), lis)) # extracting only elements based on condition
    return filterlis
t0501fun(70)
# Higher order function (Returns a reference to other fuction)
def t0501HoFun (x, func):
    return func(x)

t0501HoFun(50,t0501fun)

# 2. Write a program in Python to multiple the element of list by itself using a
# traditional function and pass the function to map to complete the operation.
   
def t0502listGen (n):
    '''
    This function takes one argument, generates a list of numbers from 1 to the given number
    '''
    listGen = [* range(1,n+1)]
    return listGen
def t0502Mul (n):
    return n*n
    
t0502list = t0502listGen(15)
t0502MulList = list(map(t0502Mul,t0502list))

print (t0502list)
print (t0502MulList)

print ("\n------Other Way------\n")

def t0502ListMul (n=5):
    listGen = [* range(1,n+1)]
    print (listGen)

    def mulList(n):
        return n*n
    return list(map(mulList,listGen))

t0502ListMul(9)

# 3. Write a program to Python find out the character in a string which is uppercase
# using list comprehension.
def t0503Upper (string = "This is the String, I WaNt tO pRint uPPerCaSe"):
    t0503FindUpper = [i for i in string if i.isupper()]
    t0503FindUpper = ''.join(t0503FindUpper)
    t0503msg = f'''Upper Characters from the given string :- "{string}" is : "{t0503FindUpper}" '''
    # print (t0503msg)
    return t0503msg

t0503Upper()

# 4. Write a program to construct a dictionary from the two lists containing the
# names of students and their corresponding subjects. The dictionary should maps
# the students with their respective subjects. Let’s see how to do this using for
# loops and dictionary comprehension. HINT-Use Zip function also
# ● Student = ['Smit', 'Jaya', 'Rayyan']
# ● capital = ['CSE', 'Networking', 'Operating System']

student = ['Smit', 'Jaya', 'Rayyan']
capital = ['CSE', 'Networking', 'Operating System']
x= zip(student,capital)
print(dict(x))

# 5. Learn More about Yield, next and Generators
t0505GenMsg = '''
Generators are used when you dont want to block memories, 
many a times when you work on big data, you may get memory error, 
to over come this we user Generators. Generator produces results when needed, 
they are able to suspend and resume their execution around the point of 
value generation, they return generator object that is an iterator
'''
t0505YieldMsg = '''
yield is a keyword that are used in generator function to retunn the output
in a step way (iteration) 
you can have multipal yield menthod within a generator function, but
can have only one return method
yield will give output one by one, Return will give final output
'''
t0505nextMsg = '''
Next is used along with yield. It is used in outside the generator function 
to call an item one at a time. when an last item is retrived 
it will through an error (Stopiteration Error)
'''

t0505list = t0502listGen(5)

print ("Normal function without generator")
def t0505squareNum (numbers):
    sq_list = []
    for num in numbers:
        sq_list.append(num**2)
    return sq_list
result = t0505squareNum(t0505list)
print ("Original list :",t0505list)
print ("Square list   :",result)

print ("\nFunction with generator")
def t0505squareNumGen (numbers):
    # sq_list = [] # not required 
    for num in numbers:
        yield num**2 

result1 = t0505squareNumGen(t0505list)
# print ("Original list :",t0505list)
print (result1)
# print ("Method 1 to get items from the generator using for Loop")
# for num in result1:
#     print (num, end=" ")
# print ("\nMethod 2 to get items from the generator using list function")
# print (list(result1))
print ("\nMethod 3 to get items from the generator using next function")
print (next(result1))
print (next(result1))
print (next(result1))

print ("\nanother method to define a generator using list comprehension\n")
t0505ListComp = [i**2 for i in range(1,(5+1))] # giving (5+1) as we need 5
print (t0505ListComp, "Not a Generator")
t0505ListComp = (i**2 for i in range(1,(5+1))) # using () to make Generator
print (t0505ListComp, "This is Generator")
print ("\nNow how to call values? use next")
print (next(t0505ListComp), "Element from Generator")
print (next(t0505ListComp), "Element from Generator")
print (next(t0505ListComp), "Element from Generator")

# 6. Write a program in Python using generators to reverse the string. Input
# String = “Consultadd Training”
def t0506string (string = 'Consultadd Training'):
    string = 'Consultadd Training'
    x = iter(string[::-1])
    for i in range(len(string)):
        print (next(x),end="")
t0506string()

# 7. Write any example on decorators.
def add_num_decorate(func):
    def wrap_add_num(i,j):
        print ("Before add num")
        print ("sum = ", func(i,j))
        print ("After add num")
    return wrap_add_num

@add_num_decorate
def add_num(i,j): # add two numbers
    return i+j
add_num(10,25)
print("-----------------------")
# Decorator for HTML 
def add_num_decorate(func):
    def wrap_add_num():
        print ("<p>")
        print (func())
        print ("/<p>")
    return wrap_add_num

@add_num_decorate
def add_num(): # add two numbers
    return "This is an artical in HTML"
add_num()

# 8. Learn about What is FRONT END and its Technologies and Tools
# ● Make sure to mention at least 5 top notch technologies of Frontend.
# ● Also mentioned the name of companies using those 5 technologies
# individually
t0508FrontendMsg = '''
Interaction with the end used either on the App or 
on web is called Front End.
'''
t0508FrontendToolMsg = '''
HTML, CSS, JavaScript, Angular, React, Django, 
Ember.js, .net, Chrome DevTools
'''
t0508FrontendIndUseMsg = '''
Amazon: Java, AngularJS, Perl. 
Facebook: PHP, React, GraphQl, Swift,JSON
Uber: JavaScript, React
Slack: JavaScript
Airbnb: JavaScript, React
'''
t0508DjangoUserMsg = '''
Disqus, Instagram, Bitbucket, youtube, spotify, dropbox
'''